<?xml version="1.0" encoding="utf-8"?>
<CudafyModule Version="1.0.4106.18924" Name="ArrayBasicIndexing" HasCudaSourceCode="true" HasPTX="true">
  <CudaSourceCode>I2luY2x1ZGUgPGN1Q29tcGxleC5oPg0KDQpleHRlcm4gIkMiIF9fZ2xvYmFsX18gdm9pZCAgYWRkXzAoaW50ICAqYSwgaW50IGFMZW5YLCBpbnQgICpiLCBpbnQgYkxlblgsIGludCAgKmMsIGludCBjTGVuWCk7DQpleHRlcm4gIkMiIF9fZ2xvYmFsX18gdm9pZCAgYWRkXzEoaW50ICAqYSwgaW50IGFMZW5YLCBpbnQgICpiLCBpbnQgYkxlblgsIGludCAgKmMsIGludCBjTGVuWCk7DQpleHRlcm4gIkMiIF9fZ2xvYmFsX18gdm9pZCAgYWRkXzIoaW50ICAqYSwgaW50IGFMZW5YLCBpbnQgICpiLCBpbnQgYkxlblgsIGludCAgKmMsIGludCBjTGVuWCk7DQpleHRlcm4gIkMiIF9fZ2xvYmFsX18gdm9pZCAgYWRkXzMoaW50ICAqYSwgaW50IGFMZW5YLCBpbnQgICpiLCBpbnQgYkxlblgsIGludCAgKmMsIGludCBjTGVuWCk7DQpleHRlcm4gIkMiIF9fZ2xvYmFsX18gdm9pZCAgYWRkXzQoaW50ICAqYSwgaW50IGFMZW5YLCBpbnQgICpiLCBpbnQgYkxlblgsIGludCAgKmMsIGludCBjTGVuWCk7DQoNCg0KZXh0ZXJuICJDIiBfX2dsb2JhbF9fIHZvaWQgIGFkZF8wKGludCAgKmEsIGludCBhTGVuWCwgaW50ICAqYiwgaW50IGJMZW5YLCBpbnQgICpjLCBpbnQgY0xlblgpDQp7DQpmb3IoaW50ICBpID0gYmxvY2tJZHgueDsgKGkgPCAweDQwMCk7IGkgKz0gZ3JpZERpbS54KQ0Kew0KY1tpXSA9IChhW2ldICsgYltpXSk7DQp9DQp9DQpleHRlcm4gIkMiIF9fZ2xvYmFsX18gdm9pZCAgYWRkXzEoaW50ICAqYSwgaW50IGFMZW5YLCBpbnQgICpiLCBpbnQgYkxlblgsIGludCAgKmMsIGludCBjTGVuWCkNCnsNCmZvcihpbnQgIGkgPSBibG9ja0lkeC54OyAoaSA8IGFMZW5YKTsgaSArPSBncmlkRGltLngpDQp7DQpjW2ldID0gKGFbaV0gKyBiW2ldKTsNCn0NCn0NCmV4dGVybiAiQyIgX19nbG9iYWxfXyB2b2lkICBhZGRfMihpbnQgICphLCBpbnQgYUxlblgsIGludCAgKmIsIGludCBiTGVuWCwgaW50ICAqYywgaW50IGNMZW5YKQ0Kew0KZm9yKGludCAgaSA9IGJsb2NrSWR4Lng7IChpIDwgYkxlblgpOyBpICs9IGdyaWREaW0ueCkNCnsNCmNbaV0gPSAoYVtpXSArIGJbaV0pOw0KfQ0KfQ0KZXh0ZXJuICJDIiBfX2dsb2JhbF9fIHZvaWQgIGFkZF8zKGludCAgKmEsIGludCBhTGVuWCwgaW50ICAqYiwgaW50IGJMZW5YLCBpbnQgICpjLCBpbnQgY0xlblgpDQp7DQpmb3IoaW50ICBpID0gYmxvY2tJZHgueDsgKGkgPCBjTGVuWCk7IGkgKz0gZ3JpZERpbS54KQ0Kew0KY1tpXSA9IChhW2ldICsgYltpXSk7DQp9DQp9DQpleHRlcm4gIkMiIF9fZ2xvYmFsX18gdm9pZCAgYWRkXzQoaW50ICAqYSwgaW50IGFMZW5YLCBpbnQgICpiLCBpbnQgYkxlblgsIGludCAgKmMsIGludCBjTGVuWCkNCnsNCmludCAgeCA9IGJsb2NrSWR4Lng7DQppbnQgIHJhbmsgPSAxOw0Kd2hpbGUgKCh4IDwgY0xlblgpKQ0Kew0KY1t4XSA9IChhW3hdICsgYlt4XSk7DQp4ICs9IGdyaWREaW0ueDsNCn0NCn0NCg0KDQo=</CudaSourceCode>
  <PTXMODULE Platform="x86">
    <PTX></PTX>
  </PTXMODULE>
  <Functions>
    <CudafyKernelMethod Name="add_0" Type="Global" IsDummy="false">
      <Type>CudafyExamples.Arrays.ArrayBasicIndexing</Type>
      <Assembly>CudafyExamples, Version=1.0.4106.19400, Culture=neutral, PublicKeyToken=null</Assembly>
      <AssemblyName>CudafyExamples</AssemblyName>
      <AssemblyPath>C:\Sandbox\HybridDSPSystems\Cudafy\CUDAfyExpress\Samples\CudafyExamples\bin\Debug\CudafyExamples.exe</AssemblyPath>
      <Checksum>1233940408</Checksum>
      <Parameters>
        <ReturnType>System.Void</ReturnType>
        <Parameter Type="Cudafy.GThread" Name="thread" Position="0" />
        <Parameter Type="System.Int32[]" Name="a" Position="1" />
        <Parameter Type="System.Int32[]" Name="b" Position="2" />
        <Parameter Type="System.Int32[]" Name="c" Position="3" />
      </Parameters>
    </CudafyKernelMethod>
    <CudafyKernelMethod Name="add_1" Type="Global" IsDummy="false">
      <Type>CudafyExamples.Arrays.ArrayBasicIndexing</Type>
      <Assembly>CudafyExamples, Version=1.0.4106.19400, Culture=neutral, PublicKeyToken=null</Assembly>
      <AssemblyName>CudafyExamples</AssemblyName>
      <AssemblyPath>C:\Sandbox\HybridDSPSystems\Cudafy\CUDAfyExpress\Samples\CudafyExamples\bin\Debug\CudafyExamples.exe</AssemblyPath>
      <Checksum>1233940408</Checksum>
      <Parameters>
        <ReturnType>System.Void</ReturnType>
        <Parameter Type="Cudafy.GThread" Name="thread" Position="0" />
        <Parameter Type="System.Int32[]" Name="a" Position="1" />
        <Parameter Type="System.Int32[]" Name="b" Position="2" />
        <Parameter Type="System.Int32[]" Name="c" Position="3" />
      </Parameters>
    </CudafyKernelMethod>
    <CudafyKernelMethod Name="add_2" Type="Global" IsDummy="false">
      <Type>CudafyExamples.Arrays.ArrayBasicIndexing</Type>
      <Assembly>CudafyExamples, Version=1.0.4106.19400, Culture=neutral, PublicKeyToken=null</Assembly>
      <AssemblyName>CudafyExamples</AssemblyName>
      <AssemblyPath>C:\Sandbox\HybridDSPSystems\Cudafy\CUDAfyExpress\Samples\CudafyExamples\bin\Debug\CudafyExamples.exe</AssemblyPath>
      <Checksum>1233940408</Checksum>
      <Parameters>
        <ReturnType>System.Void</ReturnType>
        <Parameter Type="Cudafy.GThread" Name="thread" Position="0" />
        <Parameter Type="System.Int32[]" Name="a" Position="1" />
        <Parameter Type="System.Int32[]" Name="b" Position="2" />
        <Parameter Type="System.Int32[]" Name="c" Position="3" />
      </Parameters>
    </CudafyKernelMethod>
    <CudafyKernelMethod Name="add_3" Type="Global" IsDummy="false">
      <Type>CudafyExamples.Arrays.ArrayBasicIndexing</Type>
      <Assembly>CudafyExamples, Version=1.0.4106.19400, Culture=neutral, PublicKeyToken=null</Assembly>
      <AssemblyName>CudafyExamples</AssemblyName>
      <AssemblyPath>C:\Sandbox\HybridDSPSystems\Cudafy\CUDAfyExpress\Samples\CudafyExamples\bin\Debug\CudafyExamples.exe</AssemblyPath>
      <Checksum>1233940408</Checksum>
      <Parameters>
        <ReturnType>System.Void</ReturnType>
        <Parameter Type="Cudafy.GThread" Name="thread" Position="0" />
        <Parameter Type="System.Int32[]" Name="a" Position="1" />
        <Parameter Type="System.Int32[]" Name="b" Position="2" />
        <Parameter Type="System.Int32[]" Name="c" Position="3" />
      </Parameters>
    </CudafyKernelMethod>
    <CudafyKernelMethod Name="add_4" Type="Global" IsDummy="false">
      <Type>CudafyExamples.Arrays.ArrayBasicIndexing</Type>
      <Assembly>CudafyExamples, Version=1.0.4106.19400, Culture=neutral, PublicKeyToken=null</Assembly>
      <AssemblyName>CudafyExamples</AssemblyName>
      <AssemblyPath>C:\Sandbox\HybridDSPSystems\Cudafy\CUDAfyExpress\Samples\CudafyExamples\bin\Debug\CudafyExamples.exe</AssemblyPath>
      <Checksum>1233940408</Checksum>
      <Parameters>
        <ReturnType>System.Void</ReturnType>
        <Parameter Type="Cudafy.GThread" Name="thread" Position="0" />
        <Parameter Type="System.Int32[]" Name="a" Position="1" />
        <Parameter Type="System.Int32[]" Name="b" Position="2" />
        <Parameter Type="System.Int32[]" Name="c" Position="3" />
      </Parameters>
    </CudafyKernelMethod>
  </Functions>
  <Constants />
  <Types />
</CudafyModule>